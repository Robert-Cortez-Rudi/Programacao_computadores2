/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import exception.SaldoInsuficienteException;
import model.ContaCorrente;
import service.ContaService;
import java.util.ArrayList;
import static java.util.stream.Collectors.*;
import java.util.Map;
import java.util.List;




import java.io.IOException;
import javax.swing.JOptionPane;


/**
 *
 * @author robert
 */
public class ContaGUI extends javax.swing.JFrame {

    /**
     * Creates new form ContaGUI
     */
    
    private ContaCorrente conta;
    private ContaService contaService;
    
    public ContaGUI() {
        
        initComponents();
        carregarDados();
        atualizarTabela();
        
        TabelaContas.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) { 
                int index = TabelaContas.getSelectedRow();
                if (index >= 0 && index < contaService.getContas().size()) {
                    conta = contaService.getContas().get(index);
                    txtNumero.setText(String.valueOf(conta.getNumero()));
                    txtTitular.setText(conta.getTitular());
                    txtSaldo.setText("R$ " + String.format("%.2f", conta.getSaldo()));
                }
            }
        });
        
        TabelaContas.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && TabelaContas.getSelectedRow() >= 0) {
                int linha = TabelaContas.getSelectedRow();
                model.ContaCorrente conta = contaService.getContas().get(linha);

                txtNumero.setText(String.valueOf(conta.getNumero()));
                txtTitular.setText(conta.getTitular());
                txtSaldo.setText("R$ " + String.format("%.2f", conta.getSaldo()));
            }
        });
    }
    
    private void carregarDados() {
        contaService = new ContaService();
        try {
            this.conta = contaService.lerConta("conta.txt");
            
            txtNumero.setText(String.valueOf(conta.getNumero()));
            txtTitular.setText(conta.getTitular());
            txtSaldo.setText("R$ " + String.format("%.2f", conta.getSaldo()));
            txtAreaArquivo.append("Conta carregada com sucesso!\n\n");

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao acessar arquivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblNumero = new javax.swing.JLabel();
        lblTitular = new javax.swing.JLabel();
        lblSaldo = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        txtTitular = new javax.swing.JTextField();
        txtSaldo = new javax.swing.JTextField();
        lblSaque = new javax.swing.JLabel();
        txtSaque = new javax.swing.JTextField();
        btnSacar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaArquivo = new javax.swing.JTextArea();
        btnDepositar = new javax.swing.JButton();
        CriarConta = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TabelaContas = new javax.swing.JTable();
        FiltrarSaldo = new javax.swing.JButton();
        SaldoTotal = new javax.swing.JButton();
        AgruparFaixa = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GERENCIADOR DE CONTA BANCÁRIA");

        lblNumero.setText("Número:");

        lblTitular.setText("Titular:");

        lblSaldo.setText("Saldo:");

        lblSaque.setText("Valor para saque ou deposito:");

        btnSacar.setText("Sacar");
        btnSacar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacarActionPerformed(evt);
            }
        });

        txtAreaArquivo.setEditable(false);
        txtAreaArquivo.setColumns(20);
        txtAreaArquivo.setRows(5);
        jScrollPane1.setViewportView(txtAreaArquivo);

        btnDepositar.setText("Depositar");
        btnDepositar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositarActionPerformed(evt);
            }
        });

        CriarConta.setText("Criar Conta");
        CriarConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CriarContaActionPerformed(evt);
            }
        });

        TabelaContas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Numero Conta", "Nome", "Saldo"
            }
        ));
        jScrollPane4.setViewportView(TabelaContas);

        FiltrarSaldo.setText("Filtrar Saldo > 10.000");
        FiltrarSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltrarSaldoActionPerformed(evt);
            }
        });

        SaldoTotal.setText("Saldo Total");
        SaldoTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaldoTotalActionPerformed(evt);
            }
        });

        AgruparFaixa.setText("Agrupar por Faixa");
        AgruparFaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgruparFaixaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSaque)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSaque, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitular, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTitular)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSacar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(btnDepositar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CriarConta))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(AgruparFaixa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FiltrarSaldo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(SaldoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNumero))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTitular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitular))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSaldo))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSaque)
                            .addComponent(txtSaque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDepositar)
                            .addComponent(btnSacar)
                            .addComponent(CriarConta))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FiltrarSaldo)
                            .addComponent(SaldoTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AgruparFaixa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSacarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacarActionPerformed
            // TODO add your handling code here:
            try {
            double valor = Double.parseDouble(txtSaque.getText().trim());

            contaService.sacarValor(conta, valor);

            txtSaldo.setText("R$ " + String.format("%.2f", conta.getSaldo()));

            txtAreaArquivo.append(String.format("Saque de R$ %.2f realizado com sucesso.\n\n", valor));

            int linhaSelecionada = TabelaContas.getSelectedRow();
            if (linhaSelecionada >= 0) {
                TabelaContas.setValueAt(conta.getNumero(), linhaSelecionada, 0);
                TabelaContas.setValueAt(conta.getTitular(), linhaSelecionada, 1);
                TabelaContas.setValueAt("R$ " + String.format("%.2f", conta.getSaldo()), linhaSelecionada, 2);
            }

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Informe um valor numérico válido para saque.",
                                              "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (SaldoInsuficienteException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                                              "Saldo Insuficiente", JOptionPane.WARNING_MESSAGE);
                txtAreaArquivo.append("Tentativa de saque inválida: " + ex.getMessage() + "\n\n");
            }
            try {
                contaService.salvarContas("contas_atualizadas.txt");
                txtAreaArquivo.append("Contas salvas em contas_atualizadas.txt\n\n");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erro ao salvar contas: " + ex.getMessage(),
                                              "Erro", JOptionPane.ERROR_MESSAGE);
             }
    }//GEN-LAST:event_btnSacarActionPerformed

    
    
    private void btnDepositarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepositarActionPerformed
        // TODO add your handling code here:
        try {
            double valor = Double.parseDouble(txtSaque.getText().trim());

            contaService.depositarValor(conta, valor);

            txtSaldo.setText("R$ " + String.format("%.2f", conta.getSaldo()));

            txtAreaArquivo.append(String.format("Depósito de R$ %.2f realizado com sucesso.\n\n", valor));

            int linhaSelecionada = TabelaContas.getSelectedRow();
            if (linhaSelecionada >= 0) {
                TabelaContas.setValueAt(conta.getNumero(), linhaSelecionada, 0);
                TabelaContas.setValueAt(conta.getTitular(), linhaSelecionada, 1);
                TabelaContas.setValueAt("R$ " + String.format("%.2f", conta.getSaldo()), linhaSelecionada, 2);
            }

          } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Informe um valor numérico válido para depósito.",
                                              "Erro", JOptionPane.ERROR_MESSAGE);
         }
         try {
            contaService.salvarContas("contas_atualizadas.txt");
            txtAreaArquivo.append("Contas salvas em contas_atualizadas.txt\n\n");
         } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar contas: " + ex.getMessage(),
                                          "Erro", JOptionPane.ERROR_MESSAGE);
         }

    }//GEN-LAST:event_btnDepositarActionPerformed

    private void atualizarTabela() {
        int linhaSelecionada = TabelaContas.getSelectedRow();

        for (int i = TabelaContas.getRowCount() - 1; i >= 0; i--) {
            for (int j = 0; j < TabelaContas.getColumnCount(); j++) {
                TabelaContas.setValueAt("", i, j);
            }
        }

        ArrayList<ContaCorrente> contas = contaService.getContas();
        for (int i = 0; i < contas.size(); i++) {
            ContaCorrente c = contas.get(i);
            TabelaContas.setValueAt(c.getNumero(), i, 0);
            TabelaContas.setValueAt(c.getTitular(), i, 1);
            TabelaContas.setValueAt(String.format("R$ %.2f", c.getSaldo()), i, 2);
        }

        if (linhaSelecionada >= 0 && linhaSelecionada < contas.size()) {
            TabelaContas.setRowSelectionInterval(linhaSelecionada, linhaSelecionada);
        }
}


    
    private void CriarContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CriarContaActionPerformed
        // TODO add your handling code here:
       try {
        int numero = Integer.parseInt(txtNumero.getText().trim());
        String titular = txtTitular.getText().trim();

        String saldoTxt = txtSaldo.getText()
                .replace("R$", "").replace(" ", "")
                .replace(".", "").replace(",", ".").trim();
        double saldoInicial = 0.0;
        if (!saldoTxt.isEmpty()) {
            saldoInicial = Double.parseDouble(saldoTxt);
        }

        java.util.ArrayList<model.ContaCorrente> lista = contaService.getContas();
        for (int i = 0; i < lista.size(); i++) {
            if (lista.get(i).getNumero() == numero) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Já existe uma conta com esse número.",
                        "Atenção", javax.swing.JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        model.ContaCorrente nova = new model.ContaCorrente(numero, titular, saldoInicial);
        contaService.adicionarConta(nova);

        atualizarTabela();

        int idx = contaService.getContas().size() - 1;
        if (idx >= 0 && idx < TabelaContas.getRowCount()) {
            TabelaContas.setRowSelectionInterval(idx, idx);
        }

        txtAreaArquivo.append(String.format(
                "Conta %d criada para %s com saldo inicial R$ %.2f\n",
                numero, titular, saldoInicial));
        } catch (NumberFormatException ex) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Preencha Número (inteiro) e saldo válido.",
                    "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        txtNumero.setText("");
        txtTitular.setText("");
        txtSaldo.setText("");
        
        try {
            contaService.salvarContas("contas_atualizadas.txt");
            txtAreaArquivo.append("Contas salvas em contas_atualizadas.txt\n");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar contas: " + ex.getMessage(),
                                          "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_CriarContaActionPerformed

    private void SaldoTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaldoTotalActionPerformed
        // TODO add your handling code here
        
        double saldoTotal = contaService.getContas().stream()
                .map(contas -> contas.getSaldo())
                .reduce(0.0, (a, b) -> a + b);
        
         txtAreaArquivo.append("Saldo Total de Todas as Contas: R$ " + String.format("%.2f", saldoTotal) + "\n\n");
    }//GEN-LAST:event_SaldoTotalActionPerformed

    private void FiltrarSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltrarSaldoActionPerformed
        // TODO add your handling code here:
        txtAreaArquivo.append("Contas com o saldo acima de R$ 10.000,00\n\n");
        
        contaService.getContas().stream()
                .filter(conta -> conta.getSaldo() > 10000)
                .forEach(conta -> txtAreaArquivo.append(
                        String.format("Conta %d | %s | Saldo: R$ %.2f\n",
                                conta.getNumero(), conta.getTitular(), conta.getSaldo())
                ));
    }//GEN-LAST:event_FiltrarSaldoActionPerformed

    
    private void AgruparFaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgruparFaixaActionPerformed
        // TODO add your handling code here:
        
       Map<String, List<ContaCorrente>> agruparFaixa = contaService.getContas().stream()
                .collect(groupingBy(
                        conta -> {
                            if (conta.getSaldo() <= 5000) return "Até R$5000,00";
                            else if (conta.getSaldo() <= 10000 ) return "De R$5001 até R%10000";
                            else return "Acima de R$10000";
                        }
                ));
       agruparFaixa.forEach((faixa, lista) -> {
            txtAreaArquivo.append(faixa + ":\n");
            lista.forEach(c -> txtAreaArquivo.append(
                String.format("  Conta %d | %s | R$ %.2f \n\n", c.getNumero(), c.getTitular(), c.getSaldo())
            ));
        });
    }//GEN-LAST:event_AgruparFaixaActionPerformed

  

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ContaGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgruparFaixa;
    private javax.swing.JButton CriarConta;
    private javax.swing.JButton FiltrarSaldo;
    private javax.swing.JButton SaldoTotal;
    private javax.swing.JTable TabelaContas;
    private javax.swing.JButton btnDepositar;
    private javax.swing.JButton btnSacar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblNumero;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblSaque;
    private javax.swing.JLabel lblTitular;
    private javax.swing.JTextArea txtAreaArquivo;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtSaldo;
    private javax.swing.JTextField txtSaque;
    private javax.swing.JTextField txtTitular;
    // End of variables declaration//GEN-END:variables
}
